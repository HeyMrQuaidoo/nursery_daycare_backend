{
  "openapi": "3.1.0",
  "info": { "title": "HSKEE", "version": "0.1.0" },
  "paths": {
    "/auth/": {
      "post": {
        "tags": ["Auth"],
        "summary": "User Login",
        "operationId": "user_login_auth__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Login" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset Passowrd",
        "operationId": "reset_passowrd_auth_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ResetPassword" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/verify-email": {
      "get": {
        "tags": ["Auth"],
        "summary": "Verify Email",
        "operationId": "verify_email_auth_verify_email_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Email" }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/mail-unsubscribe": {
      "get": {
        "tags": ["Auth"],
        "summary": "Mail Unsubscribe",
        "operationId": "mail_unsubscribe_auth_mail_unsubscribe_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Email" }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/mail-subscribe": {
      "get": {
        "tags": ["Auth"],
        "summary": "Mail Subscribe",
        "operationId": "mail_subscribe_auth_mail_subscribe_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Email" }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Token" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Get All",
        "operationId": "get_all_users__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create",
        "operationId": "create_users__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get",
        "operationId": "get_users__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update",
        "operationId": "update_users__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete",
        "operationId": "delete_users__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/users/add_user_role": {
      "post": {
        "tags": ["Users"],
        "summary": "Add User Role",
        "operationId": "add_user_role_users_add_user_role_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          },
          {
            "name": "role",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Role" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/roles/": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get All",
        "operationId": "get_all_roles__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Roles"],
        "summary": "Create",
        "operationId": "create_roles__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get",
        "operationId": "get_roles__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Roles"],
        "summary": "Update",
        "operationId": "update_roles__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RoleUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete",
        "operationId": "delete_roles__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/roles/add_permission": {
      "post": {
        "tags": ["Roles"],
        "summary": "Add Permission",
        "operationId": "add_permission_roles_add_permission_post",
        "parameters": [
          {
            "name": "role_alias",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Role Alias" }
          },
          {
            "name": "permission_alias",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Permission Alias" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/permissions/": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get All",
        "operationId": "get_all_permissions__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Permissions"],
        "summary": "Create",
        "operationId": "create_permissions__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/permissions/{id}": {
      "get": {
        "tags": ["Permissions"],
        "summary": "Get",
        "operationId": "get_permissions__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Permissions"],
        "summary": "Update",
        "operationId": "update_permissions__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Permissions"],
        "summary": "Delete",
        "operationId": "delete_permissions__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/property/": {
      "get": {
        "tags": ["Property"],
        "summary": "Get All",
        "operationId": "get_all_property__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Property"],
        "summary": "Create",
        "operationId": "create_property__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PropertyCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/property/{id}": {
      "get": {
        "tags": ["Property"],
        "summary": "Get",
        "operationId": "get_property__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Property"],
        "summary": "Update",
        "operationId": "update_property__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PropertyUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Property"],
        "summary": "Delete",
        "operationId": "delete_property__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/property/link_property_to_media": {
      "post": {
        "tags": ["Property"],
        "summary": "Add Property Media",
        "operationId": "add_property_media_property_link_property_to_media_post",
        "parameters": [
          {
            "name": "property_unit_assoc_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Property Unit Assoc Id"
            }
          },
          {
            "name": "media_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Media Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/units/": {
      "get": {
        "tags": ["Units"],
        "summary": "Get All",
        "operationId": "get_all_units__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Units"],
        "summary": "Create",
        "operationId": "create_units__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyUnitCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/units/{id}": {
      "get": {
        "tags": ["Units"],
        "summary": "Get",
        "operationId": "get_units__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Units"],
        "summary": "Update",
        "operationId": "update_units__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyUnitUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Units"],
        "summary": "Delete",
        "operationId": "delete_units__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ammenities/": {
      "get": {
        "tags": ["Ammenities"],
        "summary": "Get All",
        "operationId": "get_all_ammenities__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Ammenities"],
        "summary": "Create",
        "operationId": "create_ammenities__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app__schema__base_schema__AmenitiesCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ammenities/{id}": {
      "get": {
        "tags": ["Ammenities"],
        "summary": "Get",
        "operationId": "get_ammenities__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Ammenities"],
        "summary": "Update",
        "operationId": "update_ammenities__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AmenitiesUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Ammenities"],
        "summary": "Delete",
        "operationId": "delete_ammenities__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/ammenities/link_property_to_ammenity": {
      "post": {
        "tags": ["Ammenities"],
        "summary": "Add Property Ammenity",
        "operationId": "add_property_ammenity_ammenities_link_property_to_ammenity_post",
        "parameters": [
          {
            "name": "property_unit_assoc_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Property Unit Assoc Id"
            }
          },
          {
            "name": "ammenity_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Ammenity Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/media/": {
      "get": {
        "tags": ["Media"],
        "summary": "Get All",
        "operationId": "get_all_media__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Media"],
        "summary": "Create",
        "operationId": "create_media__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MediaCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "tags": ["Media"],
        "summary": "Get",
        "operationId": "get_media__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Media"],
        "summary": "Update",
        "operationId": "update_media__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MediaUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Media"],
        "summary": "Delete",
        "operationId": "delete_media__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/": {
      "get": {
        "tags": ["Message"],
        "summary": "Get All",
        "operationId": "get_all_messages__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Message"],
        "summary": "Create",
        "operationId": "create_messages__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": ["Message"],
        "summary": "Get",
        "operationId": "get_messages__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Message"],
        "summary": "Update",
        "operationId": "update_messages__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Message"],
        "summary": "Delete",
        "operationId": "delete_messages__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/reply/": {
      "post": {
        "tags": ["Message"],
        "summary": "Reply To Message",
        "operationId": "reply_to_message_messages_reply__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/MessageReply" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/users/{user_id}/drafts": {
      "get": {
        "tags": ["Message"],
        "summary": "Get User Drafts",
        "operationId": "get_user_drafts_messages_users__user_id__drafts_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOResponse_List_MessageResponseModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/users/{user_id}/scheduled": {
      "get": {
        "tags": ["Message"],
        "summary": "Get User Scheduled",
        "operationId": "get_user_scheduled_messages_users__user_id__scheduled_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOResponse_List_MessageResponseModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/users/{user_id}/outbox": {
      "get": {
        "tags": ["Message"],
        "summary": "Get User Outbox",
        "operationId": "get_user_outbox_messages_users__user_id__outbox_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOResponse_List_MessageResponseModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/users/{user_id}/inbox": {
      "get": {
        "tags": ["Message"],
        "summary": "Get User Inbox",
        "operationId": "get_user_inbox_messages_users__user_id__inbox_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOResponse_List_MessageResponseModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/messages/users/{user_id}/notifications": {
      "get": {
        "tags": ["Message"],
        "summary": "Get User Notifications",
        "operationId": "get_user_notifications_messages_users__user_id__notifications_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOResponse_List_MessageResponseModel__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/assign_contracts/": {
      "get": {
        "tags": ["ContractAssignments"],
        "summary": "Get All",
        "operationId": "get_all_assign_contracts__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ContractAssignments"],
        "summary": "Create",
        "operationId": "create_assign_contracts__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnderContractCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/assign_contracts/{id}": {
      "get": {
        "tags": ["ContractAssignments"],
        "summary": "Get",
        "operationId": "get_assign_contracts__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["ContractAssignments"],
        "summary": "Update",
        "operationId": "update_assign_contracts__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UnderContractUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ContractAssignments"],
        "summary": "Delete",
        "operationId": "delete_assign_contracts__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/property_assignment/": {
      "get": {
        "tags": ["PropertyAssignment"],
        "summary": "Get All",
        "operationId": "get_all_property_assignment__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PropertyAssignment"],
        "summary": "Create",
        "operationId": "create_property_assignment__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyAssignmentCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/property_assignment/{id}": {
      "get": {
        "tags": ["PropertyAssignment"],
        "summary": "Get",
        "operationId": "get_property_assignment__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["PropertyAssignment"],
        "summary": "Update",
        "operationId": "update_property_assignment__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyAssignmentUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["PropertyAssignment"],
        "summary": "Delete",
        "operationId": "delete_property_assignment__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/contract/": {
      "get": {
        "tags": ["Contract"],
        "summary": "Get All",
        "operationId": "get_all_contract__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contract"],
        "summary": "Create",
        "operationId": "create_contract__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContractCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/contract/{id}": {
      "get": {
        "tags": ["Contract"],
        "summary": "Get",
        "operationId": "get_contract__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Contract"],
        "summary": "Update",
        "operationId": "update_contract__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContractUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Contract"],
        "summary": "Delete",
        "operationId": "delete_contract__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/contract/add_user_lease": {
      "post": {
        "tags": ["Contract"],
        "summary": "Add User Lease",
        "operationId": "add_user_lease_contract_add_user_lease_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "User Id" }
          },
          {
            "name": "contract_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Contract Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/contract_type/": {
      "get": {
        "tags": ["ContractType"],
        "summary": "Get All",
        "operationId": "get_all_contract_type__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ContractType"],
        "summary": "Create",
        "operationId": "create_contract_type__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/contract_type/{id}": {
      "get": {
        "tags": ["ContractType"],
        "summary": "Get",
        "operationId": "get_contract_type__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["ContractType"],
        "summary": "Update",
        "operationId": "update_contract_type__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTypeUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["ContractType"],
        "summary": "Delete",
        "operationId": "delete_contract_type__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction_type/": {
      "get": {
        "tags": ["TransactionType"],
        "summary": "Get All",
        "operationId": "get_all_transaction_type__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["TransactionType"],
        "summary": "Create",
        "operationId": "create_transaction_type__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionTypeCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction_type/{id}": {
      "get": {
        "tags": ["TransactionType"],
        "summary": "Get",
        "operationId": "get_transaction_type__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["TransactionType"],
        "summary": "Update",
        "operationId": "update_transaction_type__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionTypeUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["TransactionType"],
        "summary": "Delete",
        "operationId": "delete_transaction_type__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/payment_type/": {
      "get": {
        "tags": ["PaymentType"],
        "summary": "Get All",
        "operationId": "get_all_payment_type__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PaymentType"],
        "summary": "Create",
        "operationId": "create_payment_type__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTypesCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/payment_type/{id}": {
      "get": {
        "tags": ["PaymentType"],
        "summary": "Get",
        "operationId": "get_payment_type__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["PaymentType"],
        "summary": "Update",
        "operationId": "update_payment_type__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTypesUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["PaymentType"],
        "summary": "Delete",
        "operationId": "delete_payment_type__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/invoice/": {
      "get": {
        "tags": ["Invoice"],
        "summary": "Get All",
        "operationId": "get_all_invoice__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Invoice"],
        "summary": "Create",
        "operationId": "create_invoice__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InvoiceCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/invoice/{id}": {
      "get": {
        "tags": ["Invoice"],
        "summary": "Get",
        "operationId": "get_invoice__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Invoice"],
        "summary": "Update",
        "operationId": "update_invoice__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InvoiceUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Invoice"],
        "summary": "Delete",
        "operationId": "delete_invoice__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/invoice/all_lease_due/": {
      "get": {
        "tags": ["Invoice"],
        "summary": "All Lease Due",
        "operationId": "all_lease_due_invoice_all_lease_due__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/invoice/user_lease_due/": {
      "get": {
        "tags": ["Invoice"],
        "summary": "User Lease Due",
        "operationId": "user_lease_due_invoice_user_lease_due__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction/": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Get All",
        "operationId": "get_all_transaction__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Transaction"],
        "summary": "Create",
        "operationId": "create_transaction__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction/{id}": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Get",
        "operationId": "get_transaction__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Transaction"],
        "summary": "Update",
        "operationId": "update_transaction__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Transaction"],
        "summary": "Delete",
        "operationId": "delete_transaction__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction/status/": {
      "get": {
        "tags": ["Transaction"],
        "summary": "Transaction Status",
        "operationId": "transaction_status_transaction_status__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/maintenance_request/": {
      "get": {
        "tags": ["MaintenanceRequest"],
        "summary": "Get All",
        "operationId": "get_all_maintenance_request__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["MaintenanceRequest"],
        "summary": "Create",
        "operationId": "create_maintenance_request__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRequestCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/maintenance_request/{id}": {
      "get": {
        "tags": ["MaintenanceRequest"],
        "summary": "Get",
        "operationId": "get_maintenance_request__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["MaintenanceRequest"],
        "summary": "Update",
        "operationId": "update_maintenance_request__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceRequestUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["MaintenanceRequest"],
        "summary": "Delete",
        "operationId": "delete_maintenance_request__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/calendar_event/": {
      "get": {
        "tags": ["CalendarEvent"],
        "summary": "Get All",
        "operationId": "get_all_calendar_event__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["CalendarEvent"],
        "summary": "Create",
        "operationId": "create_calendar_event__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventCreateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/calendar_event/{id}": {
      "get": {
        "tags": ["CalendarEvent"],
        "summary": "Get",
        "operationId": "get_calendar_event__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["CalendarEvent"],
        "summary": "Update",
        "operationId": "update_calendar_event__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventUpdateSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["CalendarEvent"],
        "summary": "Delete",
        "operationId": "delete_calendar_event__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tour_booking/": {
      "get": {
        "tags": ["PropertyTours"],
        "summary": "Get All",
        "operationId": "get_all_tour_booking__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["PropertyTours"],
        "summary": "Create",
        "operationId": "create_tour_booking__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TourCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/tour_booking/{id}": {
      "get": {
        "tags": ["PropertyTours"],
        "summary": "Get",
        "operationId": "get_tour_booking__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["PropertyTours"],
        "summary": "Update",
        "operationId": "update_tour_booking__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TourUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["PropertyTours"],
        "summary": "Delete",
        "operationId": "delete_tour_booking__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/utilities/": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get All",
        "operationId": "get_all_utilities__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Utilities"],
        "summary": "Create",
        "operationId": "create_utilities__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UtilitiesCreateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/utilities/{id}": {
      "get": {
        "tags": ["Utilities"],
        "summary": "Get",
        "operationId": "get_utilities__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "uuid" },
                { "type": "string" }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Utilities"],
        "summary": "Update",
        "operationId": "update_utilities__id__put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UtilitiesUpdateSchema" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DAOResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Utilities"],
        "summary": "Delete",
        "operationId": "delete_utilities__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "properties": {
          "address_type": { "$ref": "#/components/schemas/AddressTypeEnum" },
          "primary": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Primary",
            "default": true
          },
          "address_1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address 1"
          },
          "address_2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address 2"
          },
          "city": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "City"
          },
          "region": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "Region"
          },
          "country": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "Country"
          },
          "address_postalcode": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address Postalcode"
          },
          "address_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Address Id"
          }
        },
        "type": "object",
        "required": [
          "address_type",
          "address_1",
          "city",
          "region",
          "country",
          "address_postalcode"
        ],
        "title": "Address",
        "description": "Model for representing an address with an optional address ID.\n\nAttributes:\n    address_id (Optional[UUID]): The unique identifier for the address, defaults to None."
      },
      "AddressBase": {
        "properties": {
          "address_type": { "$ref": "#/components/schemas/AddressTypeEnum" },
          "primary": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Primary",
            "default": true
          },
          "address_1": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address 1"
          },
          "address_2": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address 2"
          },
          "city": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "City"
          },
          "region": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "Region"
          },
          "country": {
            "anyOf": [
              { "type": "string" },
              { "type": "string", "format": "uuid" },
              {}
            ],
            "title": "Country"
          },
          "address_postalcode": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Address Postalcode"
          }
        },
        "type": "object",
        "required": [
          "address_type",
          "address_1",
          "city",
          "region",
          "country",
          "address_postalcode"
        ],
        "title": "AddressBase",
        "description": "Base model for representing an address.\n\nAttributes:\n    address_type (AddressTypeEnum): The type of the address.\n    primary (Optional[bool]): Indicates if this is the primary address, defaults to True.\n    address_1 (Optional[str]): The first line of the address.\n    address_2 (Optional[str]): The second line of the address, defaults to None.\n    city (str|UUID|Any): The city name or identifier.\n    region (str|UUID|Any): The region name or identifier.\n    country (str|UUID|Any): The country name or identifier.\n    address_postalcode (Optional[str]): The postal code of the address."
      },
      "AddressTypeEnum": {
        "type": "string",
        "enum": ["billing", "mailing"],
        "title": "AddressTypeEnum",
        "description": "Enumeration for address types.\n\nAttributes:\n    billing (str): Represents a billing address.\n    mailing (str): Represents a mailing address."
      },
      "Amenities": {
        "properties": {
          "amenity_name": { "type": "string", "title": "Amenity Name" },
          "amenity_short_name": {
            "type": "string",
            "title": "Amenity Short Name"
          },
          "amenity_value_type": {
            "type": "string",
            "title": "Amenity Value Type"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Media" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Media" },
              { "type": "null" }
            ],
            "title": "Media",
            "default": []
          },
          "amenity_id": {
            "type": "string",
            "format": "uuid",
            "title": "Amenity Id"
          }
        },
        "type": "object",
        "required": [
          "amenity_name",
          "amenity_short_name",
          "amenity_value_type",
          "amenity_id"
        ],
        "title": "Amenities",
        "description": "Model for representing amenities with additional details.\n\nAttributes:\n    amenity_id (UUID): The unique identifier for the amenity."
      },
      "AmenitiesUpdateSchema": {
        "properties": {
          "amenity_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Amenity Name"
          },
          "amenity_short_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Amenity Short Name"
          },
          "amenity_value_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Amenity Value Type"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "AmenitiesUpdateSchema"
      },
      "AssignmentType": {
        "type": "string",
        "enum": ["other", "handler", "landlord", "contractor"],
        "title": "AssignmentType"
      },
      "CalendarEventCreateSchema": {
        "properties": {
          "title": { "type": "string", "title": "Title" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/CalendarStatus" }],
            "default": "pending"
          },
          "event_type": {
            "allOf": [{ "$ref": "#/components/schemas/EventType" }],
            "default": "other"
          },
          "event_start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Event Start Date"
          },
          "event_end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Event End Date"
          },
          "completed_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Completed Date"
          },
          "organizer_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Organizer Id"
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "CalendarEventCreateSchema",
        "description": "Schema for creating a calendar event.\n\nAttributes:\n    title (str): The title of the event.\n    description (Optional[str]): The description of the event.\n    event_type (EventTypeEnum): The type of the event.\n    event_start_date (Optional[datetime]): The start date of the event.\n    event_end_date (Optional[datetime]): The end date of the event.\n    organizer_id (Optional[Union[UUID, UserBase]]): The unique identifier for the event organizer."
      },
      "CalendarEventUpdateSchema": {
        "properties": {
          "event_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Event Id"
          },
          "id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Id"
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/CalendarStatus" },
              { "type": "null" }
            ]
          },
          "event_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/EventType" },
              { "type": "null" }
            ]
          },
          "event_start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Event Start Date"
          },
          "event_end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Event End Date"
          },
          "completed_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Completed Date"
          },
          "organizer_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Organizer Id"
          }
        },
        "type": "object",
        "required": ["status", "event_type"],
        "title": "CalendarEventUpdateSchema",
        "description": "Schema for updating a calendar event.\n\nAttributes:\n    event_id (Optional[str]): The unique identifier for the event.\n    id (Optional[UUID]): The unique identifier for the event in the database.\n    title (Optional[str]): The title of the event.\n    description (Optional[str]): The description of the event.\n    event_type (Optional[EventTypeEnum]): The type of the event.\n    event_start_date (Optional[datetime]): The start date of the event.\n    event_end_date (Optional[datetime]): The end date of the event.\n    organizer_id (Optional[Union[UUID, UserBase]]): The unique identifier for the event organizer."
      },
      "CalendarStatus": {
        "type": "string",
        "enum": ["pending", "completed", "cancelled"],
        "title": "CalendarStatus"
      },
      "ContractCreateSchema": {
        "properties": {
          "contract_type": { "type": "string", "title": "Contract Type" },
          "payment_type": { "type": "string", "title": "Payment Type" },
          "contract_status": { "$ref": "#/components/schemas/ContractStatus" },
          "contract_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contract Details"
          },
          "payment_amount": {
            "anyOf": [{ "type": "number" }, { "type": "string" }],
            "title": "Payment Amount"
          },
          "fee_percentage": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Fee Percentage"
          },
          "fee_amount": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Fee Amount"
          },
          "date_signed": {
            "type": "string",
            "format": "date-time",
            "title": "Date Signed",
            "default": "2024-07-21T12:23:52.479870"
          },
          "start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Start Date",
            "default": "2024-07-21T12:23:52.479877"
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "End Date"
          },
          "contract_info": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/UnderContractSchema" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/UnderContractSchema" },
              { "type": "null" }
            ],
            "title": "Contract Info"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "required": [
          "contract_type",
          "payment_type",
          "contract_status",
          "payment_amount"
        ],
        "title": "ContractCreateSchema",
        "description": "Schema for creating a new contract.\n\nAttributes:\n    contract_type (str): The type of the contract.\n    payment_type (str): The type of payment for the contract.\n    contract_status (ContractStatus): The status of the contract.\n    contract_details (Optional[str]): The details of the contract.\n    payment_amount (Decimal): The payment amount for the contract.\n    fee_percentage (Optional[Decimal]): The fee percentage for the contract.\n    fee_amount (Optional[Decimal]): The fee amount for the contract.\n    date_signed (datetime): The date the contract was signed.\n    start_date (Optional[datetime]): The start date of the contract.\n    end_date (Optional[datetime]): The end date of the contract.\n    contract_info (Optional[List[UnderContractSchema] | UnderContractSchema]): The information of the under-contract relationships.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): The utilities associated with the contract."
      },
      "ContractStatus": {
        "type": "string",
        "enum": ["active", "expired", "terminated"],
        "title": "ContractStatus",
        "description": "Enumeration for contract status types.\n\nAttributes:\n    active (str): Represents an active contract.\n    expired (str): Represents an expired contract.\n    terminated (str): Represents a terminated contract."
      },
      "ContractTypeCreateSchema": {
        "properties": {
          "contract_type_name": {
            "type": "string",
            "title": "Contract Type Name"
          },
          "fee_percentage": {
            "anyOf": [{ "type": "number" }, { "type": "string" }],
            "title": "Fee Percentage"
          }
        },
        "type": "object",
        "required": ["contract_type_name", "fee_percentage"],
        "title": "ContractTypeCreateSchema"
      },
      "ContractTypeUpdateSchema": {
        "properties": {
          "contract_type_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contract Type Name"
          },
          "fee_percentage": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Fee Percentage"
          }
        },
        "type": "object",
        "title": "ContractTypeUpdateSchema"
      },
      "ContractUpdateSchema": {
        "properties": {
          "contract_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contract Type"
          },
          "payment_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Payment Type"
          },
          "contract_status": {
            "anyOf": [
              { "$ref": "#/components/schemas/ContractStatus" },
              { "type": "null" }
            ]
          },
          "contract_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Contract Details"
          },
          "payment_amount": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Payment Amount"
          },
          "fee_percentage": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Fee Percentage"
          },
          "fee_amount": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Fee Amount"
          },
          "date_signed": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date Signed",
            "default": "2024-07-21T12:23:52.539497"
          },
          "start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Start Date",
            "default": "2024-07-21T12:23:52.539504"
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "End Date"
          },
          "contract_info": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/UnderContractSchema" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/UnderContractSchema" },
              { "type": "null" }
            ],
            "title": "Contract Info"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "title": "ContractUpdateSchema",
        "description": "Schema for updating an existing contract.\n\nAttributes:\n    contract_type (Optional[str]): The type of the contract.\n    payment_type (Optional[str]): The type of payment for the contract.\n    contract_status (Optional[ContractStatus]): The status of the contract.\n    contract_details (Optional[str]): The details of the contract.\n    payment_amount (Optional[Decimal]): The payment amount for the contract.\n    fee_percentage (Optional[Decimal]): The fee percentage for the contract.\n    fee_amount (Optional[Decimal]): The fee amount for the contract.\n    date_signed (Optional[datetime]): The date the contract was signed.\n    start_date (Optional[datetime]): The start date of the contract.\n    end_date (Optional[datetime]): The end date of the contract.\n    contract_info (Optional[List[UnderContractSchema] | UnderContractSchema]): The information of the under-contract relationships.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): The utilities associated with the contract."
      },
      "DAOResponse": { "type": "object", "title": "DAOResponse" },
      "DAOResponse_List_MessageResponseModel__": {
        "type": "object",
        "title": "DAOResponse[List[MessageResponseModel]]"
      },
      "EntityBillableCreate": {
        "properties": {
          "billable_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Billable Id"
          },
          "payment_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Payment Type"
          },
          "billable_amount": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Billable Amount"
          },
          "apply_to_units": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Apply To Units",
            "default": false
          }
        },
        "type": "object",
        "title": "EntityBillableCreate",
        "description": "Schema for creating an entity billable.\n\nAttributes:\n    billable_id (Optional[UUID]): The unique identifier for the billable entity.\n    payment_type (Optional[str]): The type of payment for the billable entity.\n    billable_amount (Optional[int]): The amount for the billable entity.\n    apply_to_units (Optional[bool]): Indicates whether the billable entity applies to units."
      },
      "EventType": {
        "type": "string",
        "enum": ["inspection", "meeting", "other"],
        "title": "EventType",
        "description": "Enumeration for event type.\n\nAttributes:\n    inspection (str): Represents an inspection event.\n    meeting (str): Represents a meeting event.\n    other (str): Represents other types of events."
      },
      "GenderEnum": {
        "type": "string",
        "enum": ["male", "female", "other"],
        "title": "GenderEnum",
        "description": "Enumeration for gender types.\n\nAttributes:\n    male (str): Represents male gender.\n    female (str): Represents female gender.\n    other (str): Represents other genders."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InvoiceCreateSchema": {
        "properties": {
          "issued_by": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Issued By"
          },
          "issued_to": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Issued To"
          },
          "invoice_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Invoice Details"
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Due Date"
          },
          "date_paid": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date Paid"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentStatus" },
              { "type": "string" }
            ],
            "title": "Status"
          },
          "transaction_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Transaction Id"
          },
          "invoice_items": {
            "items": { "$ref": "#/components/schemas/InvoiceItemBase" },
            "type": "array",
            "title": "Invoice Items",
            "default": []
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "InvoiceCreateSchema",
        "description": "Schema for creating an invoice.\n\nInherits from InvoiceBase."
      },
      "InvoiceItemBase": {
        "properties": {
          "quantity": { "type": "integer", "title": "Quantity" },
          "unit_price": {
            "anyOf": [{ "type": "number" }, { "type": "string" }],
            "title": "Unit Price"
          },
          "total_price": {
            "anyOf": [{ "type": "number" }, { "type": "string" }],
            "title": "Total Price"
          },
          "reference_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reference Id"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "required": ["quantity", "unit_price", "total_price"],
        "title": "InvoiceItemBase",
        "description": "Base model for invoice item information.\n\nAttributes:\n    quantity (int): The quantity of the invoice item.\n    unit_price (Decimal): The unit price of the invoice item.\n    total_price (Decimal): The total price of the invoice item.\n    reference_id (Optional[str]): The reference ID for the invoice item.\n    description (Optional[str]): The description of the invoice item."
      },
      "InvoiceUpdateSchema": {
        "properties": {
          "issued_by": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Issued By"
          },
          "issued_to": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Issued To"
          },
          "invoice_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Invoice Details"
          },
          "due_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Due Date"
          },
          "date_paid": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date Paid"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentStatus" },
              { "type": "string" }
            ],
            "title": "Status"
          },
          "transaction_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Transaction Id"
          },
          "invoice_items": {
            "items": { "$ref": "#/components/schemas/InvoiceItemBase" },
            "type": "array",
            "title": "Invoice Items",
            "default": []
          },
          "id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Id"
          },
          "invoice_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Invoice Number"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "InvoiceUpdateSchema",
        "description": "Schema for updating an invoice.\n\nAttributes:\n    id (Optional[UUID]): The unique identifier for the invoice.\n    invoice_number (Optional[str]): The number of the invoice."
      },
      "Login": {
        "properties": {
          "username": { "type": "string", "title": "Username" },
          "password": { "type": "string", "title": "Password" }
        },
        "type": "object",
        "required": ["username", "password"],
        "title": "Login",
        "description": "Model for login request payload.\n\nAttributes:\n    username (str): Username for login.\n    password (str): Password for login."
      },
      "MaintenanceRequestCreateSchema": {
        "properties": {
          "title": { "type": "string", "title": "Title" },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/MaintenanceStatus" }],
            "default": "pending"
          },
          "priority": { "type": "integer", "title": "Priority", "default": 0 },
          "requested_by": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Requested By"
          },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "scheduled_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Scheduled Date"
          },
          "completed_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Completed Date"
          },
          "is_emergency": {
            "type": "boolean",
            "title": "Is Emergency",
            "default": false
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "MaintenanceRequestCreateSchema",
        "description": "Schema for creating a maintenance request.\n\nAttributes:\n    title (str): The title of the maintenance request.\n    description (Optional[str]): The description of the maintenance request.\n    status (MaintenanceStatusEnum): The status of the maintenance request.\n    priority (int): The priority of the maintenance request.\n    requested_by (Optional[Union[UUID, UserBase]]): The user who requested the maintenance.\n    property_unit_assoc_id (Optional[UUID]): The associated property unit.\n    scheduled_date (Optional[datetime]): The scheduled date for the maintenance.\n    completed_date (Optional[datetime]): The completed date for the maintenance.\n    is_emergency (bool): Indicates if the maintenance request is an emergency."
      },
      "MaintenanceRequestUpdateSchema": {
        "properties": {
          "task_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Task Number"
          },
          "id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Id"
          },
          "title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/MaintenanceStatus" },
              { "type": "null" }
            ]
          },
          "priority": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Priority",
            "default": 0
          },
          "requested_by": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Requested By"
          },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              {},
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "scheduled_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Scheduled Date"
          },
          "completed_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Completed Date"
          },
          "is_emergency": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Emergency",
            "default": false
          }
        },
        "type": "object",
        "title": "MaintenanceRequestUpdateSchema",
        "description": "Schema for updating a maintenance request.\n\nAttributes:\n    task_number (Optional[str]): The task number of the maintenance request.\n    id (Optional[UUID]): The unique identifier for the maintenance request.\n    title (Optional[str]): The title of the maintenance request.\n    description (Optional[str]): The description of the maintenance request.\n    status (Optional[MaintenanceStatusEnum]): The status of the maintenance request.\n    priority (Optional[int]): The priority of the maintenance request.\n    requested_by (Optional[Union[UUID, UserBase]]): The user who requested the maintenance.\n    property_unit_assoc_id (Optional[Union[UUID, Any]]): The associated property unit.\n    scheduled_date (Optional[datetime]): The scheduled date for the maintenance.\n    completed_date (Optional[datetime]): The completed date for the maintenance.\n    is_emergency (Optional[bool]): Indicates if the maintenance request is an emergency."
      },
      "MaintenanceStatus": {
        "type": "string",
        "enum": ["pending", "in_progress", "completed", "cancelled"],
        "title": "MaintenanceStatus",
        "description": "Enumeration for maintenance status types.\n\nAttributes:\n    pending (str): Represents a pending maintenance status.\n    in_progress (str): Represents an in-progress maintenance status.\n    completed (str): Represents a completed maintenance status.\n    cancelled (str): Represents a cancelled maintenance status."
      },
      "Media": {
        "properties": {
          "media_name": { "type": "string", "title": "Media Name" },
          "media_type": { "type": "string", "title": "Media Type" },
          "content_url": { "type": "string", "title": "Content Url" },
          "media_id": {
            "type": "string",
            "format": "uuid",
            "title": "Media Id"
          }
        },
        "type": "object",
        "required": ["media_name", "media_type", "content_url", "media_id"],
        "title": "Media",
        "description": "Model for representing media with additional details.\n\nAttributes:\n    media_id (UUID): The unique identifier for the media."
      },
      "MediaBase": {
        "properties": {
          "media_name": { "type": "string", "title": "Media Name" },
          "media_type": { "type": "string", "title": "Media Type" },
          "content_url": { "type": "string", "title": "Content Url" }
        },
        "type": "object",
        "required": ["media_name", "media_type", "content_url"],
        "title": "MediaBase",
        "description": "Base model for media information.\n\nAttributes:\n    media_name (str): The name of the media.\n    media_type (str): The type of the media.\n    content_url (str): The URL where the media content is located."
      },
      "MediaCreateSchema": {
        "properties": {
          "media_name": { "type": "string", "title": "Media Name" },
          "media_type": { "type": "string", "title": "Media Type" },
          "content_url": { "type": "string", "title": "Content Url" }
        },
        "type": "object",
        "required": ["media_name", "media_type", "content_url"],
        "title": "MediaCreateSchema",
        "description": "Schema for creating new media.\n\nAttributes:\n    media_name (str): The name of the media.\n    media_type (str): The type of the media.\n    content_url (str): The URL where the media content is located."
      },
      "MediaUpdateSchema": {
        "properties": {
          "media_name": { "type": "string", "title": "Media Name" },
          "media_type": { "type": "string", "title": "Media Type" },
          "content_url": { "type": "string", "title": "Content Url" }
        },
        "type": "object",
        "required": ["media_name", "media_type", "content_url"],
        "title": "MediaUpdateSchema",
        "description": "Schema for updating media information.\n\nAttributes:\n    media_name (str): The name of the media.\n    media_type (str): The type of the media.\n    content_url (str): The URL where the media content is located."
      },
      "MessageCreate": {
        "properties": {
          "subject": { "type": "string", "title": "Subject" },
          "message_body": { "type": "string", "title": "Message Body" },
          "sender_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sender Id"
          },
          "is_draft": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Draft",
            "default": false
          },
          "is_scheduled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Scheduled",
            "default": false
          },
          "recipient_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Recipient Ids"
          },
          "recipient_groups": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Recipient Groups"
          }
        },
        "type": "object",
        "required": ["subject", "message_body", "sender_id"],
        "title": "MessageCreate",
        "description": "Schema for creating a message.\n\nAttributes:\n    subject (str): The subject of the message.\n    message_body (str): The body of the message.\n    sender_id (UUID): The unique identifier of the sender.\n    is_draft (Optional[bool]): Indicates if the message is a draft.\n    is_scheduled (Optional[bool]): Indicates if the message is scheduled.\n    recipient_ids (Optional[List[UUID]]): List of recipient IDs.\n    recipient_groups (Optional[List[UUID]]): List of recipient group IDs."
      },
      "MessageReply": {
        "properties": {
          "message_body": { "type": "string", "title": "Message Body" },
          "sender_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sender Id"
          },
          "parent_message_id": {
            "type": "string",
            "format": "uuid",
            "title": "Parent Message Id"
          },
          "recipient_ids": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Recipient Ids"
          },
          "recipient_groups": {
            "anyOf": [
              {
                "items": { "type": "string", "format": "uuid" },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Recipient Groups"
          }
        },
        "type": "object",
        "required": ["message_body", "sender_id", "parent_message_id"],
        "title": "MessageReply",
        "description": "Schema for replying to a message.\n\nAttributes:\n    message_body (str): The body of the reply message.\n    sender_id (UUID): The unique identifier of the sender.\n    parent_message_id (UUID): The unique identifier of the parent message.\n    recipient_ids (Optional[List[UUID]]): List of recipient IDs.\n    recipient_groups (Optional[List[UUID]]): List of recipient group IDs."
      },
      "MessageUpdateSchema": {
        "properties": {
          "subject": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Subject"
          },
          "sender_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Sender Id"
          },
          "message_body": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Message Body"
          },
          "parent_message_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Parent Message Id"
          },
          "thread_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Thread Id"
          },
          "is_draft": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Draft"
          },
          "is_notification": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Notification"
          },
          "is_reminder": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Reminder"
          },
          "is_scheduled": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Scheduled"
          },
          "is_read": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is Read"
          },
          "date_created": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date Created"
          },
          "scheduled_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Scheduled Date"
          },
          "next_remind_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Next Remind Date"
          },
          "reminder_frequency_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Reminder Frequency Id"
          }
        },
        "type": "object",
        "title": "MessageUpdateSchema"
      },
      "PaymentStatus": {
        "type": "string",
        "enum": ["pending", "completed", "cancelled", "reversal"],
        "title": "PaymentStatus",
        "description": "Enumeration for payment status types.\n\nAttributes:\n    pending (str): Represents a pending payment status.\n    completed (str): Represents a completed payment status.\n    cancelled (str): Represents a cancelled payment status.\n    reversal (str): Represents a reversal payment status."
      },
      "PaymentStatusEnum": {
        "type": "string",
        "enum": ["pending", "completed", "cancelled", "reversal"],
        "title": "PaymentStatusEnum"
      },
      "PaymentTypesCreateSchema": {
        "properties": {
          "payment_type_name": {
            "type": "string",
            "title": "Payment Type Name"
          },
          "payment_type_description": {
            "type": "string",
            "title": "Payment Type Description"
          },
          "num_of_invoices": {
            "anyOf": [{ "type": "number" }, { "type": "string" }],
            "title": "Num Of Invoices"
          }
        },
        "type": "object",
        "required": [
          "payment_type_name",
          "payment_type_description",
          "num_of_invoices"
        ],
        "title": "PaymentTypesCreateSchema"
      },
      "PaymentTypesUpdateSchema": {
        "properties": {
          "payment_type_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Payment Type Name"
          },
          "payment_type_description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Payment Type Description"
          },
          "num_of_invoices": {
            "anyOf": [
              { "type": "number" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Num Of Invoices"
          }
        },
        "type": "object",
        "title": "PaymentTypesUpdateSchema"
      },
      "PermissionsCreateSchema": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "alias": { "type": "string", "title": "Alias" },
          "description": { "type": "string", "title": "Description" }
        },
        "type": "object",
        "required": ["name", "alias", "description"],
        "title": "PermissionsCreateSchema"
      },
      "PermissionsUpdateSchema": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "alias": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Alias"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "PermissionsUpdateSchema"
      },
      "Property": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "property_type": { "$ref": "#/components/schemas/PropertyType" },
          "amount": { "type": "number", "title": "Amount" },
          "security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Security Deposit"
          },
          "commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Commission"
          },
          "floor_space": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Floor Space"
          },
          "num_units": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Units"
          },
          "num_bathrooms": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Bathrooms"
          },
          "num_garages": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Garages"
          },
          "has_balconies": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Balconies",
            "default": false
          },
          "has_parking_space": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Parking Space",
            "default": false
          },
          "pets_allowed": {
            "type": "boolean",
            "title": "Pets Allowed",
            "default": false
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "property_status": { "$ref": "#/components/schemas/PropertyStatus" },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "address": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Address" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Address" },
              { "type": "null" }
            ],
            "title": "Address"
          }
        },
        "type": "object",
        "required": [
          "name",
          "property_type",
          "amount",
          "property_status",
          "property_unit_assoc_id"
        ],
        "title": "Property",
        "description": "Model for representing a property with additional details.\n\nAttributes:\n    property_unit_assoc_id (Optional[UUID]): The unique identifier for the property unit association.\n    address (Optional[List[Address] | Address]): The address(es) associated with the property."
      },
      "PropertyAssignmentCreateSchema": {
        "properties": {
          "property_unit_assoc_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property Unit Assoc Id"
          },
          "user_id": { "type": "string", "format": "uuid", "title": "User Id" },
          "assignment_type": { "$ref": "#/components/schemas/AssignmentType" },
          "date_from": {
            "type": "string",
            "format": "date-time",
            "title": "Date From"
          },
          "date_to": {
            "type": "string",
            "format": "date-time",
            "title": "Date To"
          },
          "notes": { "type": "string", "title": "Notes" }
        },
        "type": "object",
        "required": [
          "property_unit_assoc_id",
          "user_id",
          "assignment_type",
          "date_from",
          "date_to",
          "notes"
        ],
        "title": "PropertyAssignmentCreateSchema"
      },
      "PropertyAssignmentUpdateSchema": {
        "properties": {
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "User Id"
          },
          "assignment_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/AssignmentType" },
              { "type": "null" }
            ]
          },
          "date_from": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date From"
          },
          "date_to": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Date To"
          },
          "notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Notes"
          }
        },
        "type": "object",
        "title": "PropertyAssignmentUpdateSchema"
      },
      "PropertyCreateSchema": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "property_type": { "$ref": "#/components/schemas/PropertyType" },
          "amount": { "type": "number", "title": "Amount" },
          "security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Security Deposit"
          },
          "commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Commission"
          },
          "floor_space": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Floor Space"
          },
          "num_units": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Units"
          },
          "num_bathrooms": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Bathrooms"
          },
          "num_garages": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Garages"
          },
          "has_balconies": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Balconies",
            "default": false
          },
          "has_parking_space": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Parking Space",
            "default": false
          },
          "pets_allowed": {
            "type": "boolean",
            "title": "Pets Allowed",
            "default": false
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "property_status": { "$ref": "#/components/schemas/PropertyStatus" },
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/AddressBase" },
              { "type": "null" }
            ]
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Media" },
                "type": "array"
              },
              {
                "items": { "$ref": "#/components/schemas/MediaBase" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Media" },
              { "$ref": "#/components/schemas/MediaBase" },
              { "type": "null" }
            ],
            "title": "Media"
          },
          "amenities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/app__schema__amenity__AmenitiesCreateSchema"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/app__schema__amenity__AmenitiesCreateSchema"
              },
              { "type": "null" }
            ],
            "title": "Amenities"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "required": ["name", "property_type", "amount", "property_status"],
        "title": "PropertyCreateSchema",
        "description": "Schema for creating a new property.\n\nAttributes:\n    address (Optional[AddressBase]): The address of the property.\n    media (Optional[List[Media] | List[MediaBase] | Media | MediaBase]): Media associated with the property.\n    amenities (Optional[List[AmenitiesCreateSchema] | AmenitiesCreateSchema]): Amenities associated with the property.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): Utilities associated with the property."
      },
      "PropertyStatus": {
        "type": "string",
        "enum": ["available", "unavailable"],
        "title": "PropertyStatus",
        "description": "Enumeration for property status types.\n\nAttributes:\n    available (str): Represents an available property status.\n    unavailable (str): Represents an unavailable property status."
      },
      "PropertyType": {
        "type": "string",
        "enum": ["residential", "commercial", "industrial"],
        "title": "PropertyType",
        "description": "Enumeration for property types.\n\nAttributes:\n    residential (str): Represents a residential property.\n    commercial (str): Represents a commercial property.\n    industrial (str): Represents an industrial property."
      },
      "PropertyUnit": {
        "properties": {
          "property_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property Id"
          },
          "property_unit_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Code"
          },
          "property_unit_floor_space": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Unit Floor Space"
          },
          "property_unit_amount": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Amount"
          },
          "property_floor_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Floor Id"
          },
          "property_unit_notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Notes"
          },
          "property_unit_security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Security Deposit"
          },
          "property_unit_commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Commission"
          },
          "has_amenities": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Amenities",
            "default": false
          },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          }
        },
        "type": "object",
        "required": ["property_id", "property_unit_assoc_id"],
        "title": "PropertyUnit",
        "description": "Model for representing a property unit with additional details.\n\nAttributes:\n    property_unit_assoc_id (Optional[UUID]): The unique identifier for the property unit association."
      },
      "PropertyUnitAssoc": {
        "properties": {
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "property_unit_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Type"
          }
        },
        "type": "object",
        "title": "PropertyUnitAssoc",
        "description": "Model for representing an association between property units.\n\nAttributes:\n    property_unit_assoc_id (Optional[UUID]): The unique identifier for the property unit association.\n    property_unit_type (Optional[str]): The type of the property unit."
      },
      "PropertyUnitCreateSchema": {
        "properties": {
          "property_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property Id"
          },
          "property_unit_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Code"
          },
          "property_unit_floor_space": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Unit Floor Space"
          },
          "property_unit_amount": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Amount"
          },
          "property_floor_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Floor Id"
          },
          "property_unit_notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Notes"
          },
          "property_unit_security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Security Deposit"
          },
          "property_unit_commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Commission"
          },
          "has_amenities": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Amenities",
            "default": false
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Media" },
                "type": "array"
              },
              {
                "items": { "$ref": "#/components/schemas/MediaBase" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Media" },
              { "$ref": "#/components/schemas/MediaBase" },
              { "type": "null" }
            ],
            "title": "Media"
          },
          "amenities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/app__schema__amenity__AmenitiesCreateSchema"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/app__schema__amenity__AmenitiesCreateSchema"
              },
              { "type": "null" }
            ],
            "title": "Amenities"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "required": ["property_id"],
        "title": "PropertyUnitCreateSchema",
        "description": "Schema for creating a property unit.\n\nAttributes:\n    media (Optional[List[Media] | List[MediaBase] | Media | MediaBase]): Media associated with the property unit.\n    amenities (Optional[List[AmenitiesCreateSchema] | AmenitiesCreateSchema]): Amenities associated with the property unit.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): Utilities associated with the property unit."
      },
      "PropertyUnitUpdateSchema": {
        "properties": {
          "property_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property Id"
          },
          "property_unit_code": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Code"
          },
          "property_unit_floor_space": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Unit Floor Space"
          },
          "property_unit_amount": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Amount"
          },
          "property_floor_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Property Floor Id"
          },
          "property_unit_notes": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Property Unit Notes"
          },
          "property_unit_security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Security Deposit"
          },
          "property_unit_commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Property Unit Commission"
          },
          "has_amenities": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Amenities",
            "default": false
          },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Media" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Media" },
              { "type": "null" }
            ],
            "title": "Media"
          },
          "amenities": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Amenities" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Amenities" },
              { "type": "null" }
            ],
            "title": "Amenities"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "required": ["property_id", "property_unit_assoc_id"],
        "title": "PropertyUnitUpdateSchema",
        "description": "Schema for updating a property unit.\n\nAttributes:\n    media (Optional[List[Media] | Media]): Media associated with the property unit.\n    amenities (Optional[List[Amenities] | Amenities]): Amenities associated with the property unit.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): Utilities associated with the property unit."
      },
      "PropertyUpdateSchema": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "property_type": { "$ref": "#/components/schemas/PropertyType" },
          "amount": { "type": "number", "title": "Amount" },
          "security_deposit": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Security Deposit"
          },
          "commission": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Commission"
          },
          "floor_space": {
            "anyOf": [{ "type": "number" }, { "type": "null" }],
            "title": "Floor Space"
          },
          "num_units": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Units"
          },
          "num_bathrooms": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Bathrooms"
          },
          "num_garages": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Num Garages"
          },
          "has_balconies": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Balconies",
            "default": false
          },
          "has_parking_space": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Has Parking Space",
            "default": false
          },
          "pets_allowed": {
            "type": "boolean",
            "title": "Pets Allowed",
            "default": false
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "property_status": { "$ref": "#/components/schemas/PropertyStatus" },
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/Address" },
              { "type": "null" }
            ]
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Media" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Media" },
              { "type": "null" }
            ],
            "title": "Media"
          },
          "amenities": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/Amenities" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/Amenities" },
              { "type": "null" }
            ],
            "title": "Amenities"
          },
          "utilities": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EntityBillableCreate"
                },
                "type": "array"
              },
              { "$ref": "#/components/schemas/EntityBillableCreate" },
              { "type": "null" }
            ],
            "title": "Utilities"
          }
        },
        "type": "object",
        "required": ["name", "property_type", "amount", "property_status"],
        "title": "PropertyUpdateSchema",
        "description": "Schema for updating an existing property.\n\nAttributes:\n    address (Optional[Address]): The address of the property.\n    media (Optional[List[Media] | Media]): Media associated with the property.\n    amenities (Optional[List[Amenities] | Amenities]): Amenities associated with the property.\n    utilities (Optional[List[EntityBillableCreate] | EntityBillableCreate]): Utilities associated with the property."
      },
      "ResetPassword": {
        "properties": { "email": { "type": "string", "title": "Email" } },
        "type": "object",
        "required": ["email"],
        "title": "ResetPassword",
        "description": "Model for reset password request payload.\n\nAttributes:\n    email (str): Email address to send the reset password link to."
      },
      "RoleCreateSchema": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "alias": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Alias"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "RoleCreateSchema"
      },
      "RoleUpdateSchema": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "alias": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Alias"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "RoleUpdateSchema"
      },
      "TourCreateSchema": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "email": { "type": "string", "title": "Email" },
          "phone_number": { "type": "string", "title": "Phone Number" },
          "tour_type": { "$ref": "#/components/schemas/TourType" },
          "status": { "$ref": "#/components/schemas/TourStatus" },
          "tour_date": {
            "type": "string",
            "format": "date-time",
            "title": "Tour Date"
          },
          "property_unit_assoc_id": {
            "type": "string",
            "format": "uuid",
            "title": "Property Unit Assoc Id"
          },
          "user_id": { "type": "string", "format": "uuid", "title": "User Id" }
        },
        "type": "object",
        "required": [
          "name",
          "email",
          "phone_number",
          "tour_type",
          "status",
          "tour_date",
          "property_unit_assoc_id",
          "user_id"
        ],
        "title": "TourCreateSchema"
      },
      "TourStatus": {
        "type": "string",
        "enum": ["incoming", "completed", "cancelled"],
        "title": "TourStatus"
      },
      "TourType": {
        "type": "string",
        "enum": ["in_person", "video_chat"],
        "title": "TourType"
      },
      "TourUpdateSchema": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "phone_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone Number"
          },
          "tour_type": {
            "anyOf": [
              { "$ref": "#/components/schemas/TourType" },
              { "type": "null" }
            ]
          },
          "status": {
            "anyOf": [
              { "$ref": "#/components/schemas/TourStatus" },
              { "type": "null" }
            ]
          },
          "tour_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Tour Date"
          },
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "title": "TourUpdateSchema"
      },
      "TransactionCreateSchema": {
        "properties": {
          "payment_method": { "type": "string", "title": "Payment Method" },
          "client_offered": {
            "type": "string",
            "format": "uuid",
            "title": "Client Offered"
          },
          "client_requested": {
            "type": "string",
            "format": "uuid",
            "title": "Client Requested"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time",
            "title": "Transaction Date"
          },
          "transaction_details": {
            "type": "string",
            "title": "Transaction Details"
          },
          "transaction_type_id": {
            "type": "string",
            "title": "Transaction Type Id"
          },
          "transaction_status": {
            "$ref": "#/components/schemas/PaymentStatusEnum"
          },
          "invoice_number": { "type": "string", "title": "Invoice Number" }
        },
        "type": "object",
        "required": [
          "payment_method",
          "client_offered",
          "client_requested",
          "transaction_date",
          "transaction_details",
          "transaction_type_id",
          "transaction_status",
          "invoice_number"
        ],
        "title": "TransactionCreateSchema"
      },
      "TransactionTypeCreateSchema": {
        "properties": {
          "transaction_type_name": {
            "type": "string",
            "title": "Transaction Type Name"
          },
          "transaction_type_description": {
            "type": "string",
            "title": "Transaction Type Description"
          }
        },
        "type": "object",
        "required": ["transaction_type_name", "transaction_type_description"],
        "title": "TransactionTypeCreateSchema"
      },
      "TransactionTypeUpdateSchema": {
        "properties": {
          "transaction_type_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transaction Type Name"
          },
          "transaction_type_description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transaction Type Description"
          }
        },
        "type": "object",
        "title": "TransactionTypeUpdateSchema"
      },
      "TransactionUpdateSchema": {
        "properties": {
          "payment_method": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Payment Method"
          },
          "client_offered": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Client Offered"
          },
          "client_requested": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Client Requested"
          },
          "transaction_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Transaction Date"
          },
          "transaction_details": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transaction Details"
          },
          "transaction_type_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Transaction Type Id"
          },
          "transaction_status": {
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentStatusEnum" },
              { "type": "null" }
            ]
          },
          "invoice_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Invoice Number"
          }
        },
        "type": "object",
        "title": "TransactionUpdateSchema"
      },
      "UnderContractCreate": {
        "properties": {
          "contract_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "string" },
              { "type": "null" }
            ],
            "title": "Contract Id"
          },
          "client_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Client Id"
          },
          "employee_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Employee Id"
          },
          "contract_status": {
            "anyOf": [
              { "$ref": "#/components/schemas/ContractStatus" },
              { "type": "null" }
            ]
          },
          "property_unit_assoc": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc"
          }
        },
        "type": "object",
        "title": "UnderContractCreate",
        "description": "Schema for creating an under contract.\n\nAttributes:\n    contract_id (Optional[UUID | str]): The unique identifier for the contract.\n    client_id (Optional[UUID]): The unique identifier for the client.\n    employee_id (Optional[UUID]): The unique identifier for the employee.\n    contract_status (Optional[ContractStatus]): The status of the contract.\n    property_unit_assoc (Optional[UUID]): The unique identifier for the associated property unit."
      },
      "UnderContractSchema": {
        "properties": {
          "under_contract_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Under Contract Id"
          },
          "property_unit_assoc": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/Property" },
              { "$ref": "#/components/schemas/PropertyUnit" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc"
          },
          "contract_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Contract Id"
          },
          "contract_status": {
            "anyOf": [
              { "$ref": "#/components/schemas/ContractStatus" },
              { "type": "null" }
            ]
          },
          "client_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Client Id"
          },
          "employee_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "$ref": "#/components/schemas/UserBase" },
              { "type": "null" }
            ],
            "title": "Employee Id"
          }
        },
        "type": "object",
        "title": "UnderContractSchema",
        "description": "Schema for representing an under-contract relationship.\n\nAttributes:\n    under_contract_id (Optional[UUID]): The unique identifier for the under-contract relationship.\n    property_unit_assoc (Optional[UUID | Property | PropertyUnit]): The associated property or property unit.\n    contract_id (Optional[UUID]): The unique identifier for the contract.\n    contract_status (Optional[ContractStatus]): The status of the contract.\n    client_id (Optional[UUID | UserBase]): The unique identifier for the client.\n    employee_id (Optional[UUID | UserBase]): The unique identifier for the employee."
      },
      "UnderContractUpdate": {
        "properties": {
          "property_unit_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Property Unit Assoc Id"
          },
          "contract_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Contract Id"
          },
          "contract_status": {
            "anyOf": [
              { "$ref": "#/components/schemas/ContractStatus" },
              { "type": "null" }
            ]
          },
          "client_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Client Id"
          },
          "employee_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Employee Id"
          },
          "start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "End Date"
          },
          "properties": {
            "anyOf": [
              { "$ref": "#/components/schemas/PropertyUnitAssoc" },
              { "type": "null" }
            ]
          },
          "contract": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserContract" },
              { "type": "null" }
            ]
          },
          "client_representative": {
            "anyOf": [
              { "$ref": "#/components/schemas/User" },
              { "type": "null" }
            ]
          },
          "employee_representative": {
            "anyOf": [
              { "$ref": "#/components/schemas/User" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UnderContractUpdate",
        "description": "Schema for updating an under contract.\n\nInherits from UnderContractBase."
      },
      "User": {
        "properties": {
          "employer_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Employer Name"
          },
          "occupation_status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Occupation Status"
          },
          "occupation_location": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Occupation Location"
          },
          "emergency_contact_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Name"
          },
          "emergency_contact_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "title": "Emergency Contact Email"
          },
          "emergency_contact_relation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Relation"
          },
          "emergency_contact_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Number"
          },
          "emergency_address_hash": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Emergency Address Hash"
          },
          "login_provider": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Login Provider"
          },
          "reset_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reset Token"
          },
          "verification_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Verification Token"
          },
          "is_subscribed_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Is Subscribed Token"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": true
          },
          "is_subscribed": {
            "type": "boolean",
            "title": "Is Subscribed",
            "default": true
          },
          "current_login_time": {
            "type": "string",
            "format": "date-time",
            "title": "Current Login Time",
            "default": "2024-07-21T12:23:52.060303"
          },
          "last_login_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Last Login Time"
          },
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          },
          "first_name": { "type": "string", "title": "First Name" },
          "last_name": { "type": "string", "title": "Last Name" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "phone_number": { "type": "string", "title": "Phone Number" },
          "identification_number": {
            "type": "string",
            "title": "Identification Number"
          },
          "photo_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Photo Url",
            "default": ""
          },
          "gender": { "$ref": "#/components/schemas/GenderEnum" },
          "user_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "User Id"
          },
          "addresses": {
            "anyOf": [
              { "$ref": "#/components/schemas/AddressBase" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "identification_number",
          "gender"
        ],
        "title": "User",
        "description": "Model for representing a user with detailed information.\n\nAttributes:\n    user_id (Optional[UUID]): The unique identifier for the user.\n    addresses (Optional[Any]): The addresses associated with the user."
      },
      "UserAuthCreateInfo": {
        "properties": {
          "password": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Password",
            "default": ""
          },
          "login_provider": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Login Provider"
          },
          "reset_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reset Token"
          },
          "verification_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Verification Token"
          },
          "is_subscribed_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Is Subscribed Token"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": true
          },
          "is_subscribed": {
            "type": "boolean",
            "title": "Is Subscribed",
            "default": true
          },
          "current_login_time": {
            "type": "string",
            "format": "date-time",
            "title": "Current Login Time",
            "default": "2024-07-21T12:23:52.061904"
          },
          "last_login_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Last Login Time"
          }
        },
        "type": "object",
        "title": "UserAuthCreateInfo",
        "description": "Model for creating user authentication information.\n\nAttributes:\n    password (Optional[str]): The password for the user account.\n    login_provider (Optional[str]): The login provider for the user (max length 128).\n    reset_token (Optional[str]): The reset token for password resets (max length 128).\n    verification_token (Optional[str]): The verification token for account verification (max length 128).\n    is_subscribed_token (Optional[str]): The subscription token status (max length 128).\n    is_disabled (bool): Indicates if the user account is disabled.\n    is_verified (bool): Indicates if the user account is verified.\n    is_subscribed (bool): Indicates if the user is subscribed.\n    current_login_time (datetime): The current login time of the user.\n    last_login_time (Optional[datetime]): The last login time of the user."
      },
      "UserAuthInfo": {
        "properties": {
          "login_provider": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Login Provider"
          },
          "reset_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Reset Token"
          },
          "verification_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Verification Token"
          },
          "is_subscribed_token": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Is Subscribed Token"
          },
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled",
            "default": false
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified",
            "default": true
          },
          "is_subscribed": {
            "type": "boolean",
            "title": "Is Subscribed",
            "default": true
          },
          "current_login_time": {
            "type": "string",
            "format": "date-time",
            "title": "Current Login Time",
            "default": "2024-07-21T12:23:52.060303"
          },
          "last_login_time": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Last Login Time"
          }
        },
        "type": "object",
        "title": "UserAuthInfo",
        "description": "Model for representing user authentication information.\n\nAttributes:\n    login_provider (Optional[str]): The login provider for the user (max length 128).\n    reset_token (Optional[str]): The reset token for password resets (max length 128).\n    verification_token (Optional[str]): The verification token for account verification (max length 128).\n    is_subscribed_token (Optional[str]): The subscription token status (max length 128).\n    is_disabled (bool): Indicates if the user account is disabled.\n    is_verified (bool): Indicates if the user account is verified.\n    is_subscribed (bool): Indicates if the user is subscribed.\n    current_login_time (datetime): The current login time of the user.\n    last_login_time (Optional[datetime]): The last login time of the user."
      },
      "UserBase": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          },
          "first_name": { "type": "string", "title": "First Name" },
          "last_name": { "type": "string", "title": "Last Name" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "phone_number": { "type": "string", "title": "Phone Number" },
          "identification_number": {
            "type": "string",
            "title": "Identification Number"
          },
          "photo_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Photo Url",
            "default": ""
          },
          "gender": { "$ref": "#/components/schemas/GenderEnum" }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "identification_number",
          "gender"
        ],
        "title": "UserBase",
        "description": "Base model for user information.\n\nAttributes:\n    date_of_birth (Optional[date]): The date of birth of the user.\n    first_name (str): The first name of the user (max length 128).\n    last_name (str): The last name of the user (max length 128).\n    email (EmailStr): The email address of the user.\n    phone_number (str): The phone number of the user (max length 50).\n    identification_number (str): The identification number of the user (max length 80).\n    photo_url (Optional[str]): The URL of the user's photo.\n    gender (GenderEnum): The gender of the user."
      },
      "UserContract": {
        "properties": {
          "contract_id": {
            "type": "string",
            "format": "uuid",
            "title": "Contract Id"
          },
          "contract_type": { "type": "string", "title": "Contract Type" },
          "payment_type": { "type": "string", "title": "Payment Type" },
          "contract_status": { "$ref": "#/components/schemas/ContractStatus" },
          "contract_details": { "type": "string", "title": "Contract Details" },
          "num_invoices": { "type": "integer", "title": "Num Invoices" },
          "payment_amount": { "type": "integer", "title": "Payment Amount" },
          "fee_percentage": { "type": "integer", "title": "Fee Percentage" },
          "fee_amount": { "type": "integer", "title": "Fee Amount" },
          "date_signed": {
            "type": "string",
            "format": "date-time",
            "title": "Date Signed",
            "default": "2024-07-21T12:23:52.093029"
          },
          "start_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Start Date",
            "default": "2024-07-21T12:23:52.093034"
          },
          "end_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "End Date",
            "default": "2024-07-21T12:23:52.093036"
          },
          "properties": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/Property" },
                    { "$ref": "#/components/schemas/PropertyUnit" }
                  ]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Properties"
          }
        },
        "type": "object",
        "required": [
          "contract_id",
          "contract_type",
          "payment_type",
          "contract_status",
          "contract_details",
          "num_invoices",
          "payment_amount",
          "fee_percentage",
          "fee_amount"
        ],
        "title": "UserContract",
        "description": "Base schema for representing contract information.\n\nAttributes:\n    contract_id (UUID): The unique identifier for the contract.\n    contract_type (str): The type of the contract.\n    payment_type (str): The type of payment for the contract.\n    contract_status (ContractStatus): The status of the contract.\n    contract_details (str): The details of the contract.\n    num_invoices (int): The number of invoices for the contract.\n    payment_amount (int): The payment amount for the contract.\n    fee_percentage (int): The fee percentage for the contract.\n    fee_amount (int): The fee amount for the contract.\n    date_signed (datetime): The date the contract was signed.\n    start_date (Optional[datetime]): The start date of the contract.\n    end_date (Optional[datetime]): The end date of the contract."
      },
      "UserCreateSchema": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          },
          "first_name": { "type": "string", "title": "First Name" },
          "last_name": { "type": "string", "title": "Last Name" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "phone_number": { "type": "string", "title": "Phone Number" },
          "identification_number": {
            "type": "string",
            "title": "Identification Number"
          },
          "photo_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Photo Url",
            "default": ""
          },
          "gender": { "$ref": "#/components/schemas/GenderEnum" },
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/AddressBase" },
              { "type": "null" }
            ]
          },
          "user_auth_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuthCreateInfo" },
              { "type": "null" }
            ]
          },
          "user_emergency_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEmergencyInfo" },
              { "type": "null" }
            ]
          },
          "user_employer_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEmployerInfo" },
              { "type": "null" }
            ]
          },
          "role": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Role"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "identification_number",
          "gender"
        ],
        "title": "UserCreateSchema",
        "description": "Schema for creating a new user.\n\nAttributes:\n    address (Optional[AddressBase]): The address of the user.\n    user_auth_info (Optional[UserAuthCreateInfo]): The authentication information of the user.\n    user_emergency_info (Optional[UserEmergencyInfo]): The emergency contact information of the user.\n    user_employer_info (Optional[UserEmployerInfo]): The employer information of the user.\n    role (Optional[str]): The role of the user."
      },
      "UserEmergencyInfo": {
        "properties": {
          "emergency_contact_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Name"
          },
          "emergency_contact_email": {
            "anyOf": [
              { "type": "string", "format": "email" },
              { "type": "null" }
            ],
            "title": "Emergency Contact Email"
          },
          "emergency_contact_relation": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Relation"
          },
          "emergency_contact_number": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Emergency Contact Number"
          },
          "emergency_address_hash": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Emergency Address Hash"
          }
        },
        "type": "object",
        "title": "UserEmergencyInfo",
        "description": "Model for representing user emergency contact information.\n\nAttributes:\n    emergency_contact_name (Optional[str]): The name of the emergency contact (max length 128).\n    emergency_contact_email (Optional[EmailStr]): The email address of the emergency contact.\n    emergency_contact_relation (Optional[str]): The relation of the emergency contact to the user (max length 128).\n    emergency_contact_number (Optional[str]): The phone number of the emergency contact (max length 128).\n    emergency_address_hash (Optional[UUID]): The UUID hash for the emergency address."
      },
      "UserEmployerInfo": {
        "properties": {
          "employer_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Employer Name"
          },
          "occupation_status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Occupation Status"
          },
          "occupation_location": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Occupation Location"
          }
        },
        "type": "object",
        "title": "UserEmployerInfo",
        "description": "Model for representing user employer information.\n\nAttributes:\n    employer_name (Optional[str]): The name of the employer.\n    occupation_status (Optional[str]): The occupation status of the user.\n    occupation_location (Optional[str]): The location of the occupation."
      },
      "UserUpdateSchema": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          },
          "first_name": { "type": "string", "title": "First Name" },
          "last_name": { "type": "string", "title": "Last Name" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "phone_number": { "type": "string", "title": "Phone Number" },
          "identification_number": {
            "type": "string",
            "title": "Identification Number"
          },
          "photo_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Photo Url",
            "default": ""
          },
          "gender": { "$ref": "#/components/schemas/GenderEnum" },
          "address": {
            "anyOf": [
              { "$ref": "#/components/schemas/Address" },
              { "type": "null" }
            ]
          },
          "user_auth_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserAuthInfo" },
              { "type": "null" }
            ]
          },
          "user_emergency_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEmergencyInfo" },
              { "type": "null" }
            ]
          },
          "user_employer_info": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEmployerInfo" },
              { "type": "null" }
            ]
          },
          "role": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Role"
          }
        },
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "phone_number",
          "identification_number",
          "gender"
        ],
        "title": "UserUpdateSchema",
        "description": "Schema for updating an existing user.\n\nAttributes:\n    address (Optional[Any]): The address of the user.\n    user_auth_info (Optional[UserAuthInfo]): The authentication information of the user.\n    user_emergency_info (Optional[UserEmergencyInfo]): The emergency contact information of the user.\n    user_employer_info (Optional[UserEmployerInfo]): The employer information of the user.\n    role (Optional[str]): The role of the user."
      },
      "UtilitiesCreateSchema": {
        "properties": {
          "billable_assoc_id": {
            "type": "string",
            "format": "uuid",
            "title": "Billable Assoc Id"
          },
          "billing_type": { "type": "string", "title": "Billing Type" },
          "name": { "type": "string", "title": "Name" },
          "description": { "type": "string", "title": "Description" }
        },
        "type": "object",
        "required": [
          "billable_assoc_id",
          "billing_type",
          "name",
          "description"
        ],
        "title": "UtilitiesCreateSchema"
      },
      "UtilitiesUpdateSchema": {
        "properties": {
          "billable_assoc_id": {
            "anyOf": [
              { "type": "string", "format": "uuid" },
              { "type": "null" }
            ],
            "title": "Billable Assoc Id"
          },
          "billing_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Billing Type"
          },
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "UtilitiesUpdateSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "app__schema__amenity__AmenitiesCreateSchema": {
        "properties": {
          "amenity_name": { "type": "string", "title": "Amenity Name" },
          "amenity_short_name": {
            "type": "string",
            "title": "Amenity Short Name"
          },
          "amenity_value_type": {
            "type": "string",
            "title": "Amenity Value Type"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description"
          },
          "media": {
            "anyOf": [
              {
                "items": { "$ref": "#/components/schemas/MediaBase" },
                "type": "array"
              },
              { "$ref": "#/components/schemas/MediaBase" },
              { "type": "null" }
            ],
            "title": "Media",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "amenity_name",
          "amenity_short_name",
          "amenity_value_type"
        ],
        "title": "AmenitiesCreateSchema",
        "description": "Schema for creating amenities.\n\nAttributes:\n    amenity_name (str): The name of the amenity.\n    amenity_short_name (str): The short name of the amenity.\n    amenity_value_type (str): The value type of the amenity.\n    description (Optional[str]): The description of the amenity.\n    media (Optional[List[MediaBase] | MediaBase]): The media associated with the amenity."
      },
      "app__schema__base_schema__AmenitiesCreateSchema": {
        "properties": {
          "amenity_name": { "type": "string", "title": "Amenity Name" },
          "amenity_short_name": {
            "type": "string",
            "title": "Amenity Short Name"
          },
          "amenity_value_type": {
            "type": "string",
            "title": "Amenity Value Type"
          },
          "description": { "type": "string", "title": "Description" }
        },
        "type": "object",
        "required": [
          "amenity_name",
          "amenity_short_name",
          "amenity_value_type",
          "description"
        ],
        "title": "AmenitiesCreateSchema"
      }
    }
  }
}
